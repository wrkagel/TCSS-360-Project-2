package model;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/*
TCSS 360 Project #2
Group 8
RJ Alabado, Walter Kagel, Taehong Kim
 */

/**
 * Test class for the CPU. Implements ModelListener so it can get the updates generated by the CPU.
 * @author Group 8, Lead: RJ Alabado
 * @version 11/6/2020
 */
class ALUTest {
	final short one = 1, two = 2, negOne = -1, negTwo = -2;
	
	@Test
	void addTest() {
		ALU alu = new ALU();
		short a = alu.add(one,two);
		short b = alu.add(negOne, negTwo);
		
		Assertions.assertEquals(3, a);
		Assertions.assertEquals(-3, b);
	}
	
	@Test
	void subTest() {
		ALU alu = new ALU();
		short a = alu.sub(one, two);
		
		Assertions.assertEquals(-1, a);
	}
	
	@Test
	void andTest() {
		ALU alu = new ALU();
		short a = alu.and(one, two);
		
		Assertions.assertEquals(0, a);
	}
	
	@Test
	void orTest() {
		ALU alu = new ALU();
		short a = alu.or(one, two);
		
		Assertions.assertEquals(3, a);
	}
	
	@Test
	void arithShiftLeftTest() {
		ALU alu = new ALU();
		short a = alu.arithShiftLeft(two);
		
		Assertions.assertEquals(4, a);
	}
	
	@Test
	void arithShiftRightTest() {
		ALU alu = new ALU();
		short a = alu.arithShiftRight(two);
		
		Assertions.assertEquals(1, a);
	}
	
	@Test
	void rotateLeftTest() {
		ALU alu = new ALU();
		short a = alu.rotateLeft(two);
		
		Assertions.assertEquals(4, a);
	}
	
	@Test
	void rotateRightTestWithOne() {
		ALU alu = new ALU();
		short a = alu.rotateRight(one);
		
		Assertions.assertEquals(-32768, a);
	}
	
	@Test
	void rotateRightTestWithTwo() {
		ALU alu = new ALU();
		short a = alu.rotateRight(two);
		
		Assertions.assertEquals(1, a);
	}
	
	@Test
	void notTest() {
		ALU alu = new ALU();
		short a = alu.not(two);
		
		Assertions.assertEquals(-3, a);
	}
	
	@Test
	void negationTest() {
		ALU alu = new ALU();
		short a = alu.negation(two);
		
		Assertions.assertEquals(-2, a);
	}
	
	@Test
	void negationTestMinValue() {
		ALU alu = new ALU();
		short a = alu.negation(Short.MIN_VALUE);
		
		Assertions.assertEquals(-32768, a);
	}
	
	@Test
	void getNegativeFlagTest() {
		ALU alu = new ALU();
		boolean a = alu.getNegativeFlag();
		
		Assertions.assertEquals(alu.getNegativeFlag(), a);
	}
	
	@Test
	void getZeroFlagTest() {
		ALU alu = new ALU();
		boolean a = alu.getZeroFlag();
		
		Assertions.assertEquals(alu.getZeroFlag(), a);
	}
	
	@Test
	void getOverflowFlagTest() {
		ALU alu = new ALU();
		boolean a = alu.getOverflowFlag();
		
		Assertions.assertEquals(alu.getOverflowFlag(), a);
	}
	
	@Test
	void getCarryFlagTest() {
		ALU alu = new ALU();
		boolean a = alu.getCarryFlag();
		
		Assertions.assertEquals(alu.getCarryFlag(), a);
	}
}
